AWSTemplateFormatVersion: 2010-09-09
Description: This template is used with Chp 4 in the book build scalable web apps
# Chapter 4: Scalability in App Layer
# Brian Keith
# 02 APR 2019
# Book by Savitra Sirohi
# KEYS: Centralize sessions in DynamoDB, Create IAM role to allow the app to access DynamoDB, set up auto-scaling group behind a load balancer

#Metadata: 

Parameters: 
  SubnetIDA:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet A to deploy EC2 instance into and Load Balancer 
  SubnetIDB:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet B to deploy EC2 instance into and Load Balancer
  SecurityGroupIDs:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of Security Groups to add to EC2 instance
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the 
    Default: WebAppStackKeyPair
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
  # CreationDate:
  #   Description: Enter today's Date for tagging purposes
  #   Type: String
  #   Default: "01 APR 2019"
  ELBType:
    Description: The type of Elastic LoadBalancer
    Type: String
    Default: application

Mappings: 
 AWSRegionToAMI:
   us-east-1:
     AMIID: ami-0fbe919e06f97301e      #Uses a custom Ubuntu AMI with a php applications
   us-east-2:
     AMIID: ami-0fbe919e06f97301e      #Uses a custom Ubuntu AMI with a php applications

#Conditions: 

Resources: 
#
#EC2 Instance ONE
  EC2InstanceA:
    Type: AWS::EC2::Instance                     
    Properties:
      ImageId:
        !FindInMap                                 # This is an example of the short form YAML FindInMap function
          - AWSRegionToAMI                         # It accepts three parameters each denoted by a hyphen (-)
          - !Ref AWS::Region
          - AMIID
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: !Ref SecurityGroupIDs
      SubnetId: !Ref SubnetIDA
      IamInstanceProfile : !Ref DynamoDBInstanceProfile
      Tags:                                      # Tags are an example of a sequence of mappings in YAML,
        -                                        # each key/value pair is separated by a hyphen
          Key: Name
          Value: WebAppStack-ONE      
        -
          Key: Environment
          Value: Development
        -
          Key: CreatedBy
          Value: Brian Keith
        - 
          Key: CreatedDate
          Value: "11 APR 2019"
        - 
          Key: Purpose
          Value: WebAppStack first instance



#
#EC2 Instance TWO

#
#Elastic Load Balancer (Application)
  lbWebAppStack:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: Ipv4
      # LoadBalancerAttributes:
      #   -
      Name: lbWebAppStack
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroupIDs
      # SubnetMappings:
      #   - SubnetMapping
      Subnets:
        - !Ref SubnetIDA
        - !Ref SubnetIDB
      Tags:
        -
          Key: Environment
          Value: Development
        -
          Key: CreatedBy
          Value: Brian Keith
        - 
          Key: CreatedDate
          Value: "11 APR 2019"
        - 
          Key: Purpose
          Value: WebAppStack first instance
      Type: Ref!: ELBType 

#
#AutoScaling Group

#
# IAM Role
# NOTE: Test the  DynamoDB sessions page and IAM role from a single EC2 instance first
  DynamoDBRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  DynamoDBInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "DynamoDBRole"
#
# IAM custom policy
# NOTE: restricts app access to a few action - PutItem, GetItem, UpdateItem

#DynamoDB
#NOTE: must createa  table in the North Virginia (US-EAST-1) region with name 'sessions' and primary key 'id'

  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "id"
        AttributeType: S
      KeySchema:
      - AttributeName: "id"
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: sessions
  #BillingMode: PROVISIONED
  #GlobalSecondaryIndexes:
  #  - GlobalSecondaryIndexes
      # KeySchema:
      #   -
      #     AttributeName: "id"
      #     AttributeType: "hash"
  #LocalSecondaryIndexes:
  #  - LocalSecondaryIndexes
  #PointInTimeRecoverySpecification: 
  #  PointInTimeRecoverySpecification: "False"
      # ProvisionedThroughput:
      #   ReadCapacityUnits: "5"
      #   WriteCapacityUnits: "5"
  #SSESpecification:
  #  SSESpecification: "False"
  #StreamSpecification:
  # StreamSpecification
    # Tags:                                    
    #   -                                        
    #     Key: Name
    #     Value: sessions      
    #   -
    #     Key: Environment
    #     Value: Development
    #   -
    #     Key: CreatedBy
    #     Value: Brian Keith
    #   - 
    #     Key: CreatedDate
    #     Value: CreationDate
    #   - 
    #     Key: Purpose
    #     Value: DynamoDB tables for session data. WebAppStack chapter 4
  #TimeToLiveSpecification: 
  #  TimeToLiveSpecification

#Multizone RDS Instance

Outputs:
  TableName:
    Value: !Ref 'myDynamoDBTable'
    Description: Table name of the newly created DynamoDB table

  # EC2InstanceOne:
  #   Value: Fn::GetAtt: "EC2InstanceA", "PublicIp"
  #   Description: The public IP of the first EC2 instance.

   
  