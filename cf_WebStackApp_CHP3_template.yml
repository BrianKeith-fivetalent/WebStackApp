AWSTemplateFormatVersion: 2010-09-09

Description: "Deploy the web application stack from chp 3"
# --------------------------------------------------------------------------------------
#- Author: Brian Keith
#- Date: 14 Nov 2019
#- Name: cf_WebStackApp_CHP3_template.yml
#- Description: Deploy 2 EC2s, load balancer, RDS Multi AZ
#- Version: 0.1
#- Purpose: From Chp 3 of Step by Step Build a fault tolerant web stack
#----------------------------------------------------------------------------------------- 

# Metadata: #
#
#
#
# Description: This CF will create two EC2 instances and a Load Balancer
#

Parameters:
  StackVPC:
    Type: AWS::EC2::VPC::Id
    Description: The target VPC
  SubnetIDA:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet A to deploy EC2 instance into
  SubnetIDB:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet B to deploy EC2 instance into
  SecurityGroupIDs:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of Security Groups to add to EC2 instance
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the 
    Default: WebAppStackKeyPair
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
  CreationDate:
    Description: Enter today's Date for tagging purposes
    Type: String
    Default: "16 NOV 2019"
  ELBType:
    Description: The type of Elastic LoadBalancer
    Type: String
    Default: application
 

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-0fbe919e06f97301e
    us-east-2:
      AMIID: ami-0fbe919e06f97301e

Resources:

#First WebAppStackInstance
  EC2InstanceA:
    Type: AWS::EC2::Instance                     
    Properties:
      ImageId:
        !FindInMap                                 # This is an example of the short form YAML FindInMap function
          - AWSRegionToAMI                         # It accepts three parameters each denoted by a hyphen (-)
          - !Ref AWS::Region
          - AMIID
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: !Ref SecurityGroupIDs
      SubnetId: !Ref SubnetIDA
     
      Tags:                                      # Tags are an example of a sequence of mappings in YAML,
        -                                        # each key/value pair is separated by a hyphen
          Key: Name
          Value: WebAppStack-ONE      
        -
          Key: Environment
          Value: Development
        -
          Key: CreatedBy
          Value: Brian Keith
        - 
          Key: CreatedDate
          Value: !Ref CreationDate
        - 
          Key: Purpose
          Value: WebAppStack first instance

#Second WebAppStackInstance
  EC2InstanceB:
    Type: AWS::EC2::Instance                     
    Properties:
      ImageId:
        !FindInMap                                 # This is an example of the short form YAML FindInMap function
          - AWSRegionToAMI                         # It accepts three parameters each denoted by a hyphen (-)
          - !Ref AWS::Region
          - AMIID
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: !Ref SecurityGroupIDs
      SubnetId: !Ref SubnetIDB
     
      Tags:                                      # Tags are an example of a sequence of mappings in YAML,
        -                                        # each key/value pair is separated by a hyphen
          Key: Name
          Value: WebAppStack-TWO      
        -
          Key: Environment
          Value: Development
        -
          Key: CreatedBy
          Value: Brian Keith
        - 
          Key: CreatedDate
          Value: !Ref CreationDate
        - 
          Key: Purpose
          Value: WebAppStack second instance

#Createan ALB with TargetGroup and Listener
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: [!Ref SubnetIDA, !Ref SubnetIDB]

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref StackVPC
      TargetType: instance
      Targets: [EC2InstanceA, EC2InstanceB]
      # TargetGroupAttributes:
      #   - Key: stickiness.enabled
      #     Value: 'true'
      #   - Key: stickiness.type
      #     Value: lb_cookie
      #   - Key: stickiness.lb_cookie.duration_seconds
      #     Value: '30'

# # Add an Application Load Balancer
#   elbWebAppStack:
#     Type: AWS::ElasticLoadBalancing::LoadBalancer
#     Properties:
#       AvailabilityZones:
#         Fn::GetAZs: ''
#       Instances: 
#         - Ref: EC2InstanceA
#         - Ref: EC2InstanceB
#       Listeners:
#       - LoadBalancerPort: '80'
#         InstancePort: '80'
#         Protocol: HTTP
#       HealthCheck:
#         Target: HTTP:80/
#         HealthyThreshold: '3'
#         UnhealthyThreshold: '5'
#         Interval: '30'
#         Timeout: '5'
#       Tags:                                      # Tags are an example of a sequence of mappings in YAML,
#         -                                        # each key/value pair is separated by a hyphen
#           Key: Name
#           Value: elbWebAppStack     
#         -
#           Key: FTSEnvironment
#           Value: Development
#         -
#           Key: FTSArchitect
#           Value: Brian Keith
#         - 
#           Key: FTSCreatedDate
#           Value: !Ref CreationDate
#         - 
#           Key: FTSDescription
#           Value: WebAppStack Load Balancer

#Add A multizone RDS instance
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: "dbwebappstack"
      Engine: MySQL
      MasterUsername: bloguser
      MasterUserPassword: password123
      DBInstanceClass: db.t2.micro
      AllocatedStorage: '5'
      DBSecurityGroups:
        - !Ref DatabaseSG
  DatabaseSG:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Security Group for RDS public access
      DBSecurityGroupIngress:
        - CIDRIP: 0.0.0.0/0
    
 